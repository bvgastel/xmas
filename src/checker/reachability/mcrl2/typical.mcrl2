sort Msg = struct req | rsp;

sort Q = Int -> Msg;

map
  give_q: Msg # Q # Int -> Q;
  take_q: Q -> Q;
  shift_q: Q -> Q;

var
  n : Int;
  m : Msg;
  q : Q;

eqn
  give_q(m, q, n) = q[n -> m];
  take_q(q) = shift_q(q);

  shift_q(q)(n) = q(n+1);
  shift_q(q)[n -> m] = q[n+1 -> m];

act
  T0 : Msg;
  T1, T2, T3;

proc XMAS(q0 : Q, q1 : Q, q0n : Int, q1n : Int) =
    (q0n != 2 && q1n != 2) -> sum m : Msg . 
        ( T0(m) .  XMAS(give_q(m, q0, q0n), give_q(rsp, q1, q1n), q0n + 1, q1n + 1) )

  + (q1n != 2) -> T1 . XMAS(q0, give_q(req, q1, q1n), q0n, q1n + 1)

  + (q0n != 0 && q1n != 0 && q0(0) == q1(0)) -> 
        T2 . XMAS(take_q(q0), take_q(q1), q0n - 1, q1n - 1)

  + (q1n != 0 && q0(0) == req) -> T3 . XMAS(q0, take_q(q1), q0n, q1n - 1);

init XMAS((lambda n : Int . rsp), 
          lambda n : Int . req, 2, 0);
