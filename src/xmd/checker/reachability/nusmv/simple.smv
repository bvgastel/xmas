MODULE main
VAR
  q0: array 0..1 of {rsp, req};
  q1: array 0..1 of {rsp, req};

  q0n: 0..2;
  q1n: 0..2;

  t: {s0out, s1out, q0out, q1out};
  m: {rsp, req};

INVAR t = q0out -> q0n != 0;
INVAR t = s0out -> q0n != 2;
INVAR t in {q0out, q1out} -> q1n != 0;
INVAR t in {s0out, s1out} -> q1n != 2;

INVAR t = q1out -> q0[1] != rsp;
INVAR t = q0out -> q1[1] != req;

ASSIGN
  init(q0n) := 0;
  init(q1n) := 0;

  next(q0n) :=
    case
      (t = s0out & q0n < 2): q0n + 1;
      (t = q0out & q0n > 0): q0n - 1;
      TRUE: q0n;
    esac;

  next(q1n) :=
    case
      (t in {s0out, s1out} & q1n < 2): q1n + 1;
      (t in {q0out, q1out} & q1n > 0): q1n - 1;
      TRUE: q1n;
    esac;

  init(q0[0]) := req;
  init(q0[1]) := req;
  init(q1[0]) := req;
  init(q1[1]) := req;

  next(q0[0]) := 
    case
      (t = s0out & q0n = 1): m;
      (t = q0out): req;
      TRUE: q0[0];
    esac;

  next(q0[1]) := 
    case
      (t = s0out & q0n = 0): m;
      (t = q0out & q0n = 2): q0[0];
      (t = q0out): req;
      TRUE: q0[1];
    esac;

  next(q1[0]) :=
    case
      (t = s0out & q1n = 1): m;
      (t = s1out & q1n = 1): req;
      (t = q1out): req;
      TRUE: q1[0];
    esac;

  next(q1[1]) :=
    case
      (t = s0out & q1n = 0): m;
      (t = s1out & q1n = 0): req;
      (t in {q0out, q1out} & q1n = 2): q1[0];
      (t in {q0out, q1out}): req;
      TRUE: q1[1];
    esac;

  m :=
    case
      t = s0out: {rsp, req};
      TRUE: {req};
    esac;


LTLSPEC G !(q0[0] = rsp & q0[1] = rsp & q0n = 2 & q1n = 0)
